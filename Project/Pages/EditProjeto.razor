<EditForm Model="@projeto" OnValidSubmit="@ValidSubmit">

    <DataAnnotationsValidator />


    <div class="row d-flex justify-content-center">
        <div class="col-md-7">
            <span style="font-size: 18px;">Editar Projeto</span>
            <hr class="mt-1 mb-2">

            <div class="form-group mb-3">
                <strong>Nome</strong>
                <InputText class="form-control mt-2" @bind-Value="@projeto.Name" />

                <div class="text-danger">
                    <ValidationMessage For="() => projeto.Name" />
                </div>

            </div>

            <div class="form-group mb-3">
                <strong>Nome Banco de Dados</strong>
                <InputText class="form-control mt-2" @bind-Value="@projeto.NameDataBase" />

                <div class="text-danger">
                    <ValidationMessage For="() => projeto.NameDataBase" />
                </div>

            </div>


            <div class="form-group mb-3">
                <strong>Tipo de Conex√£o com Using</strong>
                <InputText class="form-control mt-2" @bind-Value="@projeto.UsingStyleConnection" />

                <div class="text-danger">
                    <ValidationMessage For="() => projeto.UsingStyleConnection" />
                </div>

                 <div class="card">
                    <div class="card-code">
                        <figure class="highlight">
                            <pre><code class="language-scss" data-lang="scss">{ <br/> ... <br/>}</code></pre>
                        </figure>
                    </div>
                </div>
            </div>


            <div class="form-group d-flex flex-column mb-3">
                <strong>Linguagem</strong>
                <div class="form-selectgroup mt-2">
                    @foreach (var i in System.Enum.GetNames(typeof(Entities.Projeto.language)))
                    {
                        <label class="form-selectgroup-item">
                            <input type="radio" name="language" value="@i" class="form-selectgroup-input"
                            @oninput="@(ui => { projeto.Language = (string)ui.Value;})">
                            <span class="form-selectgroup-label">
                                @i.Replace("_", ".")
                            </span>
                        </label>
                    }
                </div>
                <ValidationMessage For="() => projeto.Language" />
            </div>

            <hr class="mt-1 mb-2">

            <div class="form-group mb-3">
                <strong>&nbsp;</strong>
                <button class="btn btn-success float-right" type="submit">
                    Salvar
                </button>
            </div>
        </div>
    </div>


</EditForm>

@page "/Projeto/Edit/{ProjetoGuid}"
@inject iProjetoService ProjetoService
@inject NavigationManager nav
@code {

    [Parameter]
    public string ProjetoGuid { get; set; }

    private Projeto projeto = new();

    protected async override Task OnInitializedAsync()
    {
        projeto = await ProjetoService.GetProjeto(ProjetoGuid);
        StateHasChanged();
    }


    private async void ValidSubmit()
    {
        projeto.Date = DateTime.Now;
        await ProjetoService.UpdateProjeto(ProjetoGuid, projeto);
        nav.NavigateTo($"/projeto/{ProjetoGuid}/", true);
    }
}